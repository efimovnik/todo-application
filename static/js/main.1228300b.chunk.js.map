{"version":3,"sources":["Todo.jsx","App.js","serviceWorker.js","index.js"],"names":["TodoList","items","this","props","map","item","index","key","removeItem","markTodoDone","className","React","Component","TodoListItem","onClickClose","bind","onClickDone","parseInt","todoClass","done","doneText","aria-hidden","onClick","value","type","TodoForm","onSubmit","refs","itemName","focus","event","preventDefault","newItemValue","addItem","form","reset","ref","placeholder","TodoHeader","Todos","state","todoItems","initItems","todoItem","unshift","length","setState","itemIndex","splice","todo","push","App","Todo","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1228300b.chunk.js","sourcesContent":["import React from 'react';\n\nclass TodoList extends React.Component {\n  render () {\n    var items = this.props.items.map((item, index) => {\n      return (\n        <TodoListItem key={index} item={item} index={index} removeItem={this.props.removeItem} markTodoDone={this.props.markTodoDone} />\n      );\n    });\n\n    return (\n      <ul className=\"Todo-group\"> {items} </ul>\n    );\n  }\n}\n\nclass TodoListItem extends React.Component {\n  constructor(props) {\n    super(props);\n    this.onClickClose = this.onClickClose.bind(this);\n    this.onClickDone = this.onClickDone.bind(this);\n  }\n  onClickClose() {\n    var index = parseInt(this.props.index);\n    this.props.removeItem(index);\n  }\n  onClickDone() {\n    var index = parseInt(this.props.index);\n    this.props.markTodoDone(index);\n  }\n  render () {\n    var todoClass = this.props.item.done ?\n        \"done\" : \"undone\";\n    let doneText = this.props.item.done ?\n        \"[X]\" : \"[  ]\";\n    return(\n      <li className=\"Todo-item\">\n        <span className=\"icon\" aria-hidden=\"true\" onClick={this.onClickDone}>{ doneText }</span>\n\n        <div className={todoClass}>\n          {this.props.item.value}\n        </div>\n        <button type=\"button\" className=\"close\" onClick={this.onClickClose}>&times;</button>\n      </li>\n    );\n  }\n}\n\nclass TodoForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.onSubmit = this.onSubmit.bind(this);\n  }\n  componentDidMount() {\n    this.refs.itemName.focus();\n  }\n  onSubmit(event) {\n    event.preventDefault();\n    var newItemValue = this.refs.itemName.value;\n\n    if(newItemValue) {\n      this.props.addItem({newItemValue});\n      this.refs.form.reset();\n    }\n  }\n  render () {\n    return (\n      <form ref=\"form\" onSubmit={this.onSubmit} className=\"form-inline\">\n        <input type=\"text\" ref=\"itemName\" className=\"form-control\" placeholder=\"add a new todo...\"/>\n        <button type=\"submit\" className=\"submit\">+</button>\n      </form>\n    );\n  }\n}\n\nclass TodoHeader extends React.Component {\n  render () {\n    return <h1 className=\"Todo-header\">Todo list</h1>;\n  }\n}\n\nclass Todos extends React.Component {\n  constructor (props) {\n    super(props);\n\n    this.addItem = this.addItem.bind(this);\n    this.removeItem = this.removeItem.bind(this);\n    this.markTodoDone = this.markTodoDone.bind(this);\n    this.state = { todoItems: props.initItems };\n  }\n  addItem(todoItem) {\n    const { todoItems } = this.state;\n    todoItems.unshift({\n      index: todoItems.length+1,\n      value: todoItem.newItemValue,\n      done: false\n    });\n    this.setState({todoItems: todoItems});\n  }\n  removeItem (itemIndex) {\n    const { todoItems } = this.state;\n    this.setState({todoItems: todoItems.splice(itemIndex, 1) });\n  }\n  markTodoDone(itemIndex) {\n    const { todoItems } = this.state;\n\n    var todo = todoItems[itemIndex];\n    todoItems.splice(itemIndex, 1);\n    todo.done = !todo.done;\n    todo.done ? todoItems.push(todo) : todoItems.unshift(todo);\n    this.setState({todoItems: todoItems});\n  }\n  render() {\n    return (\n      <div className=\"Todo\">\n        <TodoHeader />\n        <TodoList items={this.props.initItems} removeItem={this.removeItem} markTodoDone={this.markTodoDone}/>\n        <TodoForm addItem={this.addItem} />\n      </div>\n    );\n  }\n}\n\nexport default Todos;\n","import React from 'react';\nimport './App.css';\nimport Todos from './Todo.jsx'\n\nfunction App() {\n  const todoItems = [];\n  todoItems.push({index: 1, value: \"learn react\", done: false});\n  todoItems.push({index: 2, value: \"Go shopping\", done: true});\n  todoItems.push({index: 3, value: \"buy flowers\", done: true});\n\n  return (\n    <Todos initItems={todoItems}/>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}